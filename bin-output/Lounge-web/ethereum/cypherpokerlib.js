/**
* 
* CypherPoker + Ethereum integration library. 
* Used to initialize and control the Web3.js library and provide CypherPoker-specific functionality.
* Used to initialize and control the Web3.js library and provide CypherPoker-specific functionality.
*
* (C)opyright 2016
*
* This source code is protected by copyright and distributed under license.
* Please see the root LICENSE file for terms and conditions.
*
*/
var version="1.1"; //CypherPoker Library version
var web3 = null; //main Web3 object
var gameObj = this; //game object on which callbacks are invoked; should be "this" for desktop and "Lounge" for web

//default debugging trace function
var trace=function (msg) {
	try {
		console.log(msg);
		if (window.Lounge != undefined) {
			gameObj=window.Lounge;
		}
		gameObj.flashTrace(msg);
	} catch (err) {
	}
}

//-- Contract Interfaces --

/**
* Returns a "PokerHand" contract interface.
*/
function pokerhandContract(targetVersion) {
	return (web3.eth.contract([{"constant":true,"inputs":[],"name":"dKey","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"updateCommunityCards","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"cards","type":"uint256[]"}],"name":"storePrivateCards","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"dCard","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"phases","outputs":[{"name":"player","type":"address"},{"name":"phaseNum","type":"uint8"}],"type":"function"},{"constant":true,"inputs":[],"name":"pot","outputs":[{"name":"value","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"keySubmitted","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[],"name":"betPos","outputs":[{"name":"index","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"card","type":"uint256"}],"name":"storePublicCard","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"encKey","type":"uint256"},{"name":"decKey","type":"uint256"}],"name":"storeKeys","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"agreed","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"uint256"}],"name":"playerCards","outputs":[{"name":"index","type":"uint256"},{"name":"suit","type":"uint256"},{"name":"value","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"payWinner","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"highestResult","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"prime","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"uint256"}],"name":"encCards","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"playerKeys","outputs":[{"name":"encKey","type":"uint256"},{"name":"decKey","type":"uint256"},{"name":"prime","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"winner","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[],"name":"fold","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"cards","type":"uint256[]"}],"name":"storeEncryptedCards","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"storeBet","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"generatePlayerScore","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"results","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"communityCards","outputs":[{"name":"index","type":"uint256"},{"name":"suit","type":"uint256"},{"name":"value","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"agreeToContract","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"decryptCards","outputs":[],"type":"function"},{"inputs":[{"name":"requiredPlayers","type":"address[]"}],"type":"constructor"}]));
	/*
	if ((targetVersion==null) || (targetVersion==undefined) || (targetVersion=="") || (targetVersion=="*")) {
		targetVersion=version;
	}
	switch (targetVersion) {
		case "1.0":
			return (web3.eth.contract([{"constant":false,"inputs":[],"name":"updateCommunityCards","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"cards","type":"uint8[]"}],"name":"storeEncryptedCards","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"phases","outputs":[{"name":"player","type":"address"},{"name":"phaseNum","type":"uint8"}],"type":"function"},{"constant":true,"inputs":[],"name":"pot","outputs":[{"name":"value","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"keySubmitted","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":false,"inputs":[{"name":"encKey","type":"uint8"},{"name":"decKey","type":"uint8"}],"name":"storeKeys","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"betPos","outputs":[{"name":"index","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"betVal","type":"uint256"}],"name":"storeBet","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"agreed","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"uint256"}],"name":"playerCards","outputs":[{"name":"index","type":"uint256"},{"name":"suit","type":"uint256"},{"name":"value","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"payWinner","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"highestResult","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"card","type":"uint8"}],"name":"storePublicCard","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"prime","outputs":[{"name":"","type":"uint8"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"playerKeys","outputs":[{"name":"encKey","type":"uint256"},{"name":"decKey","type":"uint256"},{"name":"prime","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"winner","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[],"name":"fold","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"generatePlayerScore","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"results","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"communityCards","outputs":[{"name":"index","type":"uint256"},{"name":"suit","type":"uint256"},{"name":"value","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"agreeToContract","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"cards","type":"uint8[]"}],"name":"storePrivateCards","outputs":[],"type":"function"},{"inputs":[{"name":"requiredPlayers","type":"address[]"}],"type":"constructor"}]));
			break;
	}
	*/
};
/**
* Returns a "pha" (Poker Hand analyzer) contract interface.
*/
function phaContract() {
	return (web3.eth.contract([{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"bestHand","outputs":[{"name":"suit","type":"uint256"},{"name":"value","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint8"}],"name":"getSortedGroupLength32","outputs":[{"name":"","type":"uint32"}],"type":"function"},{"constant":false,"inputs":[{"name":"suits","type":"uint256[]"},{"name":"values","type":"uint256[]"}],"name":"analyze","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"sortedGroups","outputs":[{"name":"suit","type":"uint256"},{"name":"value","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"startingValue","type":"uint256"}],"name":"addCardValues","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"highestHandScore","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"swapCards","outputs":[{"name":"suit","type":"uint256"},{"name":"value","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"cards","outputs":[{"name":"suit","type":"uint256"},{"name":"value","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"workCards","outputs":[{"name":"suit","type":"uint256"},{"name":"value","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"memberCount","type":"uint8"}],"name":"checkGroupExists","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"sortedGroup","outputs":[{"name":"suit","type":"uint256"},{"name":"value","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"cardGroups","outputs":[{"name":"suit","type":"uint256"},{"name":"value","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"resultHand","outputs":[{"name":"","type":"uint8"}],"type":"function"},{"inputs":[],"type":"constructor"}]));
};
/**
* Returns a "PokerBetting" contract interface.
*/
function pokerbettingContract() {
	return (web3.eth.contract([{"constant":false,"inputs":[{"name":"playersRef","type":"PokerBetting.playersType storage"},{"name":"betsRef","type":"PokerBetting.betsType storage"}],"name":"resetBets","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"playersRef","type":"PokerBetting.playersType storage"},{"name":"betsRef","type":"PokerBetting.betsType storage"}],"name":"playerBetsEqual","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":false,"inputs":[{"name":"playersRef","type":"PokerBetting.playersType storage"},{"name":"betsRef","type":"PokerBetting.betsType storage"},{"name":"potRef","type":"PokerBetting.potType storage"},{"name":"positionRef","type":"PokerBetting.positionType storage"},{"name":"betVal","type":"uint256"}],"name":"storeBet","outputs":[{"name":"updatePhase","type":"bool"}],"type":"function"}]));
};
/**
* Returns a "GamePhase" contract interface.
*/
function gamephaseContract() {
	return (web3.eth.contract([{"constant":false,"inputs":[{"name":"phasesRef","type":"GamePhase.PhasesMap storage"},{"name":"player","type":"address"},{"name":"phaseNum","type":"uint8"}],"name":"setPlayerPhase","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"phasesRef","type":"GamePhase.PhasesMap storage"},{"name":"player","type":"address"}],"name":"getPlayerPhase","outputs":[{"name":"","type":"uint8"}],"type":"function"},{"constant":false,"inputs":[{"name":"phasesRef","type":"GamePhase.PhasesMap storage"},{"name":"phaseNum","type":"uint8"}],"name":"allPlayersAtPhase","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":false,"inputs":[{"name":"phasesRef","type":"GamePhase.PhasesMap storage"},{"name":"phaseNum","type":"uint8"}],"name":"allPlayersAbovePhase","outputs":[{"name":"","type":"bool"}],"type":"function"}]));
};
/**
* Returns a "CryptoCards" contract interface.
*/
function cryptocardsContract() {
	return (web3.eth.contract([{"constant":false,"inputs":[{"name":"cardsRef","type":"CryptoCards.CardType[] storage"}],"name":"adjustIndexes","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"sourceRef","type":"CryptoCards.CardsType storage"},{"name":"targetRef","type":"CryptoCards.CardsType storage"}],"name":"appendCards","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"cardsRef","type":"CryptoCards.CardsType storage"},{"name":"keyRef","type":"CryptoCards.Key storage"}],"name":"decryptCards","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"sourceRef","type":"CryptoCards.CardsType storage"},{"name":"targetRef","type":"CryptoCards.SplitCardsType storage"}],"name":"splitCardData","outputs":[],"type":"function"}]));
};

//-- Main Functions --

/**
* Connects to an Ethereum client at a specified address and port (defaults: "localhost" and 8545 respectively).
*/
function connect(address, port) {
	if ((address==null) || (address=="") || (address==undefined)) {
		address="localhost";
	}
	if ((port==null) || (port=="") || (port==undefined) || isNaN(Number(port))) {
		port=8545;
	}
	trace ("cypherpokerlib.js -> connect (\""+address+"\", "+port+")");
	web3 = new Web3(new Web3.providers.HttpProvider("http://"+address+":"+port));
	var moduleOptions={};
	moduleOptions.admin=true;
	moduleOptions.personal=true;
	moduleOptions.miner=true;
	moduleOptions.shh=true;
	moduleOptions.eth=true;
	moduleOptions.debug=true;
	createWeb3Extensions(moduleOptions);
	if (web3) {		
		return (true);
	} else {
		return (false);
	}
}

/**
* Gets the balance of an Ethereum account in a specified denomination (defalt is 'ether')
*/
function getBalance(address, denomination) {
	if (!web3) {return (null);}	
	//this may be called often so we probably don't want traces here unless necessary
	if ((address==null) || (address==undefined) || (address=="")) {
		address=web3.eth.accounts[0];
	}
	if ((denomination==null) || (denomination==undefined) || (denomination=="")) {
		denomination="ether";
	}
	var balance=String(web3.fromWei(web3.eth.getBalance(address), denomination));	
	return (balance);
}
/*
* Deploys a new "CryptoCards" contract to be included in the blockchain.
*/
function deployCryptoCardsContract(cbFunc, gasVal) {			
	if (!web3) {return;}
	if ((gasVal==undefined) || (gasVal==null) || (gasVal=="")) {
		gasVal = 3000000;
	}
	trace ("cypherpokerlib.js -> deployCryptoCardsContract (\""+cbFunc+"\", "+gasVal+")");
	//The ["new"] is needed for compatibility with the AIR HTMLLoader object's JavaScript interpreter.
	var cryptocards = cryptocardsContract()["new"]({
		from: web3.eth.accounts[0], 
		data: '60606040526104a0806100126000396000f36502028339330b5060606040526000357c0100000000000000000000000000000000000000000000000000000000900480632e06b00a146100655780636e34e5df1461007d578063e959bfa91461009e578063eee639c6146100bf57610060565b610007565b61007b60048080359060200190919050506101d1565b005b61009c600480803590602001909190803590602001909190505061022b565b005b6100bd60048080359060200190919080359060200190919050506100e0565b005b6100de6004808035906020019091908035906020019091905050610340565b005b60006000600090505b83600001600050805490508160ff1610156101ca57826002016000505483600101600050548560000160005083815481101561000757906000526020600020906003020160005b50600001600050540a06915081506060604051908101604052808381526020016001600d60028603040181526020016001600d6002860306018152602001508460000160005082815481101561000757906000526020600020906003020160005b506000820151816000016000505560208201518160010160005055604082015181600201600050559050505b80806001019150506100e9565b5b50505050565b6000600090505b81805490508160ff1610156102265760028282815481101561000757906000526020600020906003020160005b506000016000828282505403925050819055505b80806001019150506101d8565b5b5050565b6000600090505b82600001600050805490508160ff16101561033a578160000160005080548060010182818154818355818115116102bb576003028160030283600052602060002091820191016102ba9190610282565b808211156102b657600060008201600050600090556001820160005060009055600282016000506000905550600101610282565b5090565b5b5050509190906000526020600020906003020160005b8560000160005084815481101561000757906000526020600020906003020160005b5090919091506000820160005054816000016000505560018201600050548160010160005055600282016000505481600201600050555050505b8080600101915050610232565b5b505050565b6000600090505b82600001600050805490508160ff16101561049a578160000160005080548060010182818154818355818115116103b0578183600052602060002091820191016103af9190610391565b808211156103ab5760008181506000905550600101610391565b5090565b5b5050509190906000526020600020900160005b8560000160005084815481101561000757906000526020600020906003020160005b506001016000505490919091505550816001016000508054806001018281815481835581811511610448578183600052602060002091820191016104479190610429565b808211156104435760008181506000905550600101610429565b5090565b5b5050509190906000526020600020900160005b8560000160005084815481101561000757906000526020600020906003020160005b5060020160005054909190915055505b8080600101915050610347565b5b50505056', 
		gas: gasVal
	}, gameObj[cbFunc]);
	return (String(cryptocards));
}
/*
* Deploys a new "GamePhase" contract to be included in the blockchain.
*/

function deployGamePhaseContract(cbFunc, gasVal) {	
	if (!web3) {return;}
	if ((gasVal==undefined) || (gasVal==null) || (gasVal=="")) {
		gasVal = 3000000;
	}
	trace ("cypherpokerlib.js -> deployGamePhaseContract (\""+cbFunc+"\", "+gasVal+")");
	var gamephase = gamephaseContract()["new"](
	   {
		 from: web3.eth.accounts[0], 
		 data: '606060405261026d806100126000396000f36502028339330b50606060405260e060020a60003504633247bbeb8114610047578063a17cfc80146100dc578063b17cdf5c14610155578063b6a7ecfa14610171575b610007565b61018d60043560243560443560005b835460ff821610156100d6578354600160a060020a038416908590839081101561000757600091825260209091200154600160a060020a031614156101b857835482908590839081101561000757602060002001805474ff0000000000000000000000000000000000000000191660a060020a9390930292909217909155505b50505050565b61018f6004356024356000805b835460ff8216101561014e578354600160a060020a038416908590839081101561000757600091825260209091200154600160a060020a031614156101c0578354849082908110156100075760009182526020909120015460a060020a900460ff1691505b5092915050565b6101a6600435602435815460009081908114156101c85761014e565b6101a66004356024358154600090819081141561021f5761014e565b005b6040805160ff929092168252519081900360200190f35b60408051918252519081900360200190f35b600101610056565b6001016100e9565b5060005b835460ff8216101561020e57835460ff841690859083908110156100075760009182526020909120015460a060020a900460ff1614610217576000915061014e565b6001915061014e565b6001016101cc565b5060005b835460ff8216101561020e57835460ff841690859083908110156100075760009182526020909120015460a060020a900460ff1611610265576000915061014e565b60010161022356', 
		 gas: gasVal
	   }, gameObj[cbFunc]);
	return (String(gamephase));
}
/*
* Deploys a new "PokerBetting" contract to be included in the blockchain.
*/

function deployPokerBettingContract(cbFunc, gasVal) {	
	if (!web3) {return;}
	if ((gasVal==undefined) || (gasVal==null) || (gasVal=="")) {
		gasVal = 3000000;
	}
	trace ("cypherpokerlib.js -> deployPokerBettingContract (\""+cbFunc+"\", "+gasVal+")");
	var pokerbetting = pokerbettingContract()["new"](
	   {
		 from: web3.eth.accounts[0], 
		 data: '60606040526101f5806100126000396000f36502028339330b50606060405260e060020a600035046317265e87811461003c578063372fd3a314610092578063e5afc70a146100dd575b610007565b61012760043560243560005b825460ff8216101561014d578254600090839082908690859081101561000757505050848252506020808220830154600160a060020a031682528390526040812055600101610048565b6101296004356024355b815460009081908190849082908790829081101561000757509052602080832054600160a060020a0316835252604081205491508181141561015f57610157565b610129600435602435604435606435608435600160a060020a03331660009081526020859052604081208054830190558354820184558554835460010106835561013b868661009c565b005b60408051918252519081900360200190f35b15610144575060015b95945050505050565b505050565b600192505b505092915050565b5060015b845460ff82161015610152578454829085906000908890859081101561000757908252602080832090910154600160a060020a031682529190915260409020541415806101df5750845484906000908790849081101561000757908252602080832090910154600160a060020a03168252919091526040812054145b156101ed5760009250610157565b60010161016356', 
		 gas: gasVal
	   }, gameObj[cbFunc]);
	return (String(pokerbetting));
}
/*
* Deploys a new "pha" (Poker Hand Analyzer) contract to be included in the blockchain.
*/

function deployPHAContract(cbFunc, gasVal) {	
	if (!web3) {return;}
	if ((gasVal==undefined) || (gasVal==null) || (gasVal=="")) {
		gasVal = 3000000;
	}
	trace ("cypherpokerlib.js -> deployPHAContract (\""+cbFunc+"\", "+gasVal+")");
	var pha = phaContract()["new"](
	   {
		 from: web3.eth.accounts[0], 
		 data: '606060405260008080556001556118618061001a6000396000f3606060405236156100a35760e060020a60003504630fdcac9081146100a557806319d0ee111461010e578063321da9f0146101545780634d0331f2146101d65780637dd8dddf1461022b57806386643c97146102665780638c85de5e1461026f5780638dc10768146102c657806397f8d0811461030b578063c698439b14610350578063d0126a0f146103a1578063e2004892146103f5578063ead2b75f14610436575b005b610442600435600280548290811015610002575060008190527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf9102908101547f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace909101549082565b61045b6004355b600080805b60098054859081101561000257600091909152600080516020611801833981519152015460ff82161015610975576001918201910161011a565b610475602460048035828101929082013591813591820191013560008084831415806101805750600785115b15610186575b5060005b60ff81168590101561049e57600480546001810180835582818380158290116104e25760008390526104e29060029081026000805160206118418339815191529081019184020161058a565b6104426004356024356009805483908110156100025750600052600080516020611801833981519152820180548290811015610002575060009081526020902060029091020180546001919091015490915082565b6104756004355b6009546000908190819081908190819081908190600190111561077a575b60095460ff831610156107f95761080d82610115565b61047560005481565b61044260043560068054829081101561000257506000526000805160206118218339815191526002909102908101547ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d409091015482565b61044260043560048054829081101561000257506000526000805160206118418339815191526002909102908101546000805160206117c18339815191529091015482565b61044260043560058054829081101561000257506000526000805160206117a18339815191526002909102908101546000805160206117818339815191529091015482565b6104756004355b6000805b60095460ff82161015610767578260ff1660096000508281548110156100025760009190915260008051602061180183398151915201541415610772576001915061076c565b61044260043560088054829081101561000257506000526002026000805160206117e18339815191528101547ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee49091015482565b610442600435602435600760205260008281526040902080548290811015610002579060005260206000209060020201600050600181015490549250905082565b61048760035460ff1681565b6040805192835260208301919091528051918290030190f35b6040805163ffffffff929092168252519081900360200190f35b60408051918252519081900360200190f35b6040805160ff929092168252519081900360200190f35b6105a9600060016002600360045b6005805460018101808355828183801582901161098057600202816002028360005260206000209182019101610980919061058a565b5050509190906000526020600020906002020160006040604051908101604052808a8a87818110156100025790509090602002013581526020018888878181101561000257602090810290920135909252825185559190910151600193840155505091909101905061018a565b6000546001541115610562576001546000555b6004805460008083559190915261075990600202600080516020611841833981519152908101905b808211156105a557600080825560019190910190815561058a565b5090565b60015460009081556105c29060026003600460056104ac565b60005460015411156105d5576001546000555b6105e7600060036004600560066104ac565b60005460015411156105fa576001546000555b61060c600160026003600460056104ac565b600054600154111561061f576001546000555b610631600160036004600560066104ac565b6000546001541115610644576001546000555b610656600160046005600660006104ac565b6000546001541115610669576001546000555b61067b600260036004600560066104ac565b600054600154111561068e576001546000555b6106a0600260046005600660006104ac565b60005460015411156106b3576001546000555b6106c5600360056006600060016104ac565b60005460015411156106d8576001546000555b6106ea600360066000600160026104ac565b60005460015411156106fd576001546000555b61070f600460066000600160026104ac565b6000546001541115610722576001546000555b610734600560006001600260036104ac565b6000546001541115610747576001546000555b61054f600660016002600360046104ac565b505060005495945050505050565b600091505b50919050565b60010161035b565b600091505b60055460ff8316101561095d5760058054839081101561000257600091909152600a546002919091026000805160206117818339815191520154965060ff1680156107ca5750856001145b156107d457600e95505b6001820160ff16860a90980197848611156107ed578594505b6001919091019061077f565b6003850a909801620f424084020197610968565b63ffffffff169650600090505b60098054839081101561000257600091909152600080516020611801833981519152015460ff82161015610939576009805483908110156100025760008051602061180183398151915201805490915082908110156100025760009182526020909120600a546002929092020160010154965060ff16801561089c5750856001145b156108a657600e95505b600160096000508381548110156100025760009190915260008051602061180183398151915201541180156108ff5750600560096000508381548110156100025760008051602061180183398151915201549190911090505b156109455760028701600a0a860290980197868310806109285750868314801561092857508386115b15610934578593508692505b610955565b60019190910190610250565b9785019784861115610955578594505b60010161081a565b620f42408502909801975b5096979650505050505050565b8192505b5050919050565b50505091909060005260206000209060020201600060048054899081101561000257915260020260008051602061184183398151915281015482556000805160206117c18339815191520154600191820155600580549182018082559092508281838015829011610a0a57600202816002028360005260206000209182019101610a0a919061058a565b50505091909060005260206000209060020201600060048054889081101561000257915260020260008051602061184183398151915281015482556000805160206117c18339815191520154600191820155600580549182018082559092508281838015829011610a9457600202816002028360005260206000209182019101610a94919061058a565b50505091909060005260206000209060020201600060048054879081101561000257915260020260008051602061184183398151915281015482556000805160206117c18339815191520154600191820155600580549182018082559092508281838015829011610b1e57600202816002028360005260206000209182019101610b1e919061058a565b50505091909060005260206000209060020201600060048054869081101561000257915260020260008051602061184183398151915281015482556000805160206117c18339815191520154600191820155600580549182018082559092508281838015829011610ba857600202816002028360005260206000209182019101610ba8919061058a565b5050509190906000526020600020906002020160006004805485908110156100025790825260020260008051602061184183398151915281015483556000805160206117c18339815191520154600192830155905550610c0e5b600a805460ff19169055565b610cc85b60006001815b600f8260ff1610156111d7575060005b60055460ff821610156112035760058054829081101561000257600091909152600a546002919091026000805160206117818339815191520154935060ff168015610c735750826001145b15610c7d57600e92505b8160ff16831415611266576006805460018101808355828183801582901161120f57600083905261120f9060029081026000805160206118218339815191529081019184020161058a565b610d665b600080806001815b60055460ff83161015610fea5760058054839081101561000257600091909152600a546002919091026000805160206117818339815191520154935060ff168015610d1f5750826001145b15610d2957600e92505b6005805460001984019081101561000257600091909152600202600080516020611781833981519152015483036001146110635760009450610fe3565b600181905560001415610d7b57610dd7610de3565b610e115b610f6d60055460005b818160ff1610156117555760058054829081101561000257506000908152600282026000805160206117a183398151915281018290556000805160206117818339815191520155600101610d88565b610df2610c12565b6111945b600a805460ff19166001179055565b610dfa610ccc565b6001556001546000901115610e1857610e11610d7f565b5050505050565b610e585b60005b600f8160ff161015610f775760ff81166000908152600760209081526040822080548382559083529120610fc99160020281019061058a565b610e60610c02565b610ee960015b600080805b60055460ff8416101561135e5783600014156113e457600580546007916000918690811015610002576002026000805160206117a1833981519152015482525060209190915260409020805460018101808355828183801582901161144c5760020281600202836000526020600020918201910161144c919061058a565b610f0560015b600060006000831561107b576110aa6004610357565b6001556009546004901115610f2057610f33610e1c565b6001555b60015460001415610f5357610f5b610de3565b610f3b610c02565b610f456000610e66565b610f1c6000610eef565b6001555b610e11610d7f565b610f63610e1c565b610f4f6000610232565b610f75610e1c565b565b60098054600080835591909152610fd290600080516020611801833981519152908101905b808211156105a557600081815080546000825560020290600052602060002090810190610fd6919061058a565b50600101610e1f565b5050565b5050600101610f9c565b94505b5050505090565b60058054600090811015610002575250506000805160206117a183398151915254632faf080092506001905b60055460ff8316101561105a57806005600050838154811015610002576000919091526002026000805160206117a183398151915201541461106f576317d7840093505b610fe084610232565b60019190910190610cd4565b60019190910190611016565b60098054600090811015610002575260008051602061180183398151915254600514156111ba576111c3610de3565b156110b7576110c1610de3565b6110d56003610357565b6110ce6329b92700610232565b9250610979565b80156110e657506110e66002610357565b156110f3576110fd610de3565b61110a6003610357565b6110ce6323c34600610232565b801561111b575061111b6001610357565b1561112857611132610de3565b61113f6002610357565b6110ce6311e1a300610232565b156111ba575060009050805b60095460ff82161015610ddf576009805482908110156100025760009190915260008051602061180183398151915201546002141561118c57600191909101905b60010161114b565b60018260ff1611156111ad576110ce630bebc200610232565b6110ce6305f5e100610232565b60009250610979565b6110ce631dcd6500610232565b505b505050565b6005805460008083559190915261126e906002026000805160206117a18339815191529081019061058a565b60019190910190610c18565b50505091909060005260206000209060020201600060058054859081101561000257509052600283026000805160206117a18339815191528101548255600080516020611781833981519152015460019190910155505b600101610c28565b50600090505b60065460ff821610156112c157600580546001810180835582818380158290116112ed5760008390526112ed9060029081026000805160206117a18339815191529081019184020161058a565b600680546000808355919091526111d0906002026000805160206118218339815191529081019061058a565b505050919090600052602060002090600202016000600680548590811015610002575090526002830260008051602061182183398151915281015482557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d400154600191820155919091019050611274565b600f9150836000141561137057600491505b600092505b8160ff168360ff1610156111d0575060005b60ff838116600090815260076020526040902054908216101561157c57600880546001810180835582818380158290116115c25760008390526115c29060029081026000805160206117e18339815191529081019184020161058a565b6005805460079160009186908110156100025760020260008051602061178183398151915201548252506020919091526040902080546001810180835582818380158290116114d8576002028160020283600052602060002091820191016114d8919061058a565b5050509190906000526020600020906002020160006040604051908101604052806005600050888154811015610002578185526002026000805160206117a1833981519152015482528054602092909201918990811015610002579352600292909202600080516020611781833981519152015490915280518255602001516001919091015550611570565b50505091909060005260206000209060020201600060406040519081016040528060056000508881548110156100025760009182526002026000805160206117a1833981519152019050548152600580546020929092019189908110156100025760009182526002026000805160206117a1833981519152019050600190810154909152815184556020919091015192019190915550505b60019290920191610e6b565b60085460009011156116685760098054600181018083558281838015829011611674576000839052611674906000805160206118018339815191529081019083016116ed565b50505091909060005260206000209060020201600060408051808201825260ff8816600090815260076020529190912080548291908790811015610002576040852091855260208086206002929092029190910154835260ff8a168552600781528154920191879081101561000257906000526020600020906002020160005060019081015490915281518455602091909101519201919091555050600101611387565b505b60019290920191611375565b50505091909060005260206000209001600050600880548254818455600084815260209020600291909102810192821561171a576000526000805160206117e18339815191529160020282015b8281111561171a57825482556001838101549083015560029283019291909101906116c1565b50506001015b808211156105a5576000818150805460008255600202906000526020600020908101906116e7919061058a565b5061172692915061058a565b50506008805460008083559190915261166691506002026000805160206117e18339815191529081019061058a565b600580546000808355919091526111d2906002026000805160206117a18339815191529081019061058a56036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db1036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db08a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19cf3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee36e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7aff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b', 
		 gas: gasVal
	   }, gameObj[cbFunc]);
	return (String(pha));
}
/*
* Deploys a new "PokerHand" contract to be included in the blockchain.
*/

function deployPokerHandContract(players, cbFunc, gasVal) {	
	if (!web3) {return;}
	if ((gasVal==undefined) || (gasVal==null) || (gasVal=="")) {
		gasVal = 6000000;
	}
	/*
	Currently hardcoded to:
	
	CryptoCards cardsLib = CryptoCards(0x1e4fb2dc80eeb755ad8334f829d5010e0cab7a3d);
    GamePhase phase = GamePhase(0x07fbc852fbf6e3aea6e5436a70e641199185b602);
    PokerBetting betting = PokerBetting(0xf486bb3bcb6fa17b31eb5ca4d2571721f8096918);
    pha phaLib = pha(0x57b9d92c80bf2a52e1503bd91ccebeb93566e014);

	*/   
	trace ("cypherpokerlib.js -> deployPokerHandContract (["+players+"], \""+cbFunc+"\", "+gasVal+")");
	var pokerhand = pokerhandContract()["new"](
	   players,
	   {
		 from: web3.eth.accounts[0], 
		 data: '6060604081905260008054600160a060020a0319908116731e4fb2dc80eeb755ad8334f829d5010e0cab7a3d1782556001805482167307fbc852fbf6e3aea6e5436a70e641199185b60217905560028054821673f486bb3bcb6fa17b31eb5ca4d2571721f8096918179055600380549091167357b9d92c80bf2a52e1503bd91ccebeb93566e014179055603b600455601655611ffd388190039081908339810160405280510160058054600160a060020a0319163317905560005b81518160ff1610156101225760068054600181018083558281838015829011610269576000839052610269907ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f9081019083015b808211156102f6576000815560010161010e565b6000600a8190556001600b819055600160a060020a0333818116808552600860209081526040808720805460ff191687179055805195547fa17cfc8000000000000000000000000000000000000000000000000000000000875260106004880181905260248801949094529051941695633247bbeb959294879363a17cfc8093604482810194919392839003019082908760325a03f2156100025750506040805180517f3247bbeb0000000000000000000000000000000000000000000000000000000082526004820195909552600160a060020a03909316602484015260019390930160ff16604483015250905160648281019260009291908290030181838760325a03f2156100025750505061043a6000600060116000508181548183558181151161044a5782825261044a90600080516020611fbd833981519152908101906102d8565b5050509190906000526020600020900160008484815181101561000257602090810290910101518254600160a060020a031916179091555050601080546001810180835582818380158290116102fa5760008390526102fa90600080516020611fdd8339815191529081019083015b808211156102f6578054600160a860020a03191681556001016102d8565b5090565b5050509190906000526020600020900160006040604051908101604052808686815181101561000257602090810290910181015182529081018390528151845492909101517401000000000000000000000000000000000000000002600160a060020a0319929092161760a060020a60ff021916179091558351909150600990829085908590811015610002576020908102909101810151600160a060020a031682529190915250604081208190558251600f90829085908590811015610002576020908102909101810151600160a060020a03168252829052604081208190558451859085908110156100025760209081029091010151600160a060020a03168152604081206001018190558451859085908110156100025760209081029091010151600160a060020a031690525060408120600201556001016100ba565b5050611a5d806105606000396000f35b50505050600090505b60028160ff161015610499576011805460018101808355828183801582901161049c57600083905261049c90600080516020611fbd8339815191529081019083016102d8565b50565b5050509190906000526020600020900160006040805180820190915260108054829190879081101561000257818552600080516020611fdd833981519152810154600160a060020a031683528154602093909301928110156100025750909252600080516020611fdd833981519152850154740100000000000000000000000000000000000000009081900460ff169092528051835460209290920151600160a060020a0319929092161760a060020a60ff02191691021790555060010161045356006060604052361561013d5760e060020a60003504630df94da4811461013f578063114403b41461014857806313e8e61d146101ca5780632c5c04ec146102665780632e37eef61461026f5780634ba2363a146102c15780636293fc81146102ca578063705806a6146102e557806385946062146102ee5780638780c1fa1461032f5780638da5cb5b14610465578063a5b8f21014610477578063af4126bc14610492578063be71248a146104d9578063c116df0e14610507578063c7ee005e14610510578063d31ecc9914610519578063dcabbacf1461054c578063dfbf53ae14610573578063e684f46a14610585578063e7456468146105f8578063e9dc70e514610694578063eb34636614610827578063ef378f6214610aa5578063eff02a0714610abd578063f22b12f414610b4a578063fcff962814610c31575b005b610e38601b5481565b60158054600e8054808455600084905261013d93926003027f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4759081019282156110865760005260206000209160030282015b8281111561108657825482556001838101549083015560028381015490830155600392830192919091019061019a565b6040805160048035808201356020818102808601820190965281855261013d9593946024949093850192918291908501908490808284375094965050505050505060005b81518160ff1610156110ba5733600160a060020a03166000908152600d60205260409020805460018101808355828183801582901161125c5760030281600302836000526020600020918201910161125c919061108e565b610e38601a5481565b610e4a60043560118054829081101561000257506000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680154600160a060020a0381169060a060020a900460ff1682565b610e38600a5481565b610e3860043560186020526000908152604090205460ff1681565b610e38600b5481565b61013d600435600e8054600181018083556000929190828183801582901161136957600302816003028360005260206000209182019101611369919061108e565b61013d60043560243533600160a060020a03166000908152600f602090815260408083208581556001818101869055600454600292909201919091556018909252909120805460ff1916909117905561165f600060015b60065460ff821610156110ad5760068054600f91600091849081101561000257600080516020611a3d8339815191520154600160a060020a031682525060209190915260408120600201541480610411575060068054600f91600091849081101561000257600080516020611a3d8339815191520154600160a060020a031682525060408120541490505b80610457575060068054600f91600091849081101561000257600080516020611a3d8339815191520154600160a060020a03168252506020919091526040812060010154145b15611a3557600091506110b2565b610e73600554600160a060020a031681565b610e3860043560086020526000908152604090205460ff1681565b610e90600435602435601460205260008281526040902080548290811015610002575060009081526020902060039190910201805460018201546002929092015490925083565b61013d5b600754604051600160a060020a039182169160009130909116319082818181858883f15050505050565b610e3860165481565b610e3860045481565b610e3860043560243560196020526000828152604090208054829081101561000257506000908152602090200154905081565b600f6020526004356000908152604090208054600182015460029290920154610e90929083565b610e73600754600160a060020a031681565b61013d60005b60065460ff821610156115c0576006805433600160a060020a03169190839081101561000257600091909152600080516020611a3d8339815191520154600160a060020a031614156115c85733600160a060020a0316600090815260176020526040902060019055611657565b6040805160048035808201356020818102808601820190965281855261013d9593946024949093850192918291908501908490808284375094965050505050505060005b81518160ff161015610eb05733600160a060020a03166000908152600c60205260409020805460018101808355828183801582901161100557600302816003028360005260206000209182019101611005919061108e565b61013d604080516002547fe5afc70a0000000000000000000000000000000000000000000000000000000082526006600483015260096024830152600a6044830152600b60648301523460848301529151600092600160a060020a03169163e5afc70a9160a48281019260209291908290030181878760325a03f215610002575050604051511590506115bd575b60065460ff821610156115b55760068054600154600160a060020a031691633247bbeb91601091908590811015610002575080546000829052600080516020611a3d833981519152860154600160a060020a031691859163a17cfc8091859189908110156100025750506040805160e760020a630142f9f9028152600481019290925260248201859052516044828101926020929190829003018160008760325a03f21561000257505060408051805160e060020a633247bbeb0282526004820195909552602481019390935260019390930160ff16604483015250905160648281019260009291908290030181838760325a03f21561000257505050600101610722565b6000805433600160a060020a039081168352600d602052604080518185207f6e34e5df000000000000000000000000000000000000000000000000000000008252600e60048301526024820152905161013d949390921691636e34e5df9160448181019286929091908290030181838760325a03f21561000257505050600060009054906101000a9004600160a060020a0316600160a060020a031663eee639c6600d600050600033600160a060020a0316815260200190815260200160002060005060126000506040518360e060020a028152600401808381526020018281526020019250505060006040518083038160008760325a03f215610002575050604080516003547f321da9f0000000000000000000000000000000000000000000000000000000008252600482019283526012805460448401819052600160a060020a0392909216945063321da9f09390926013928291602481019160649190910190869080156109ba57602002820191906000526020600020905b8160005054815260200190600101908083116109a3575b505083810382528481815481526020019150805480156109fc57602002820191906000526020600020905b8160005054815260200190600101908083116109e5575b50509450505050506020604051808303816000876161da5a03f115610002575050604080515133600160a060020a03166000908152601760205291909120819055601654909250829010159050610a76578060166000508190555033600760006101000a815481600160a060020a03021916908302179055505b6012805460008083559190829080158290116118b4578183600052602060002091820191016118b49190611321565b610e3860043560176020526000908152604090205481565b610e9060043560158054829081101561000257506000526003027f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4758101547f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4768201547f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4779092015490919083565b61013d33600160a060020a038181166000818152600860209081526040808320805460ff191660019081179091558151905460e760020a630142f9f9028252601060048301819052602483019690965291519190951695633247bbeb959093879363a17cfc809360448481019492939192839003019082908760325a03f21561000257505050604051805190602001506001016040518460e060020a0281526004018084815260200183600160a060020a031681526020018260ff168152602001935050505060006040518083038160008760325a03f21561000257505050610eae610f95565b61013d5b6000805b60065460ff8316101561166c576006805460008054600160a060020a03169263e959bfa992600e92600f929091889081101561000257600080516020611a3d8339815191520154600160a060020a03168252506020919091526040805181832060e060020a63e959bfa902825260048201949094526024810193909352516044838101938290030181838760325a03f21561000257505050600090505b60065460ff82161015611735576006805460008054600160a060020a03169263e959bfa992600d929190869081101561000257600080516020611a3d8339815191520154600160a060020a0316825260209290925281546040822092600f9291889081101561000257600080516020611a3d8339815191520154600160a060020a03168252506020919091526040808220815160e060020a63e959bfa902815260048101949094526024840152516044838101938290030181838760325a03f21561000257505060068054600d925060009190849081101561000257600080516020611a3d8339815191520154600160a060020a0316825250602091909152604081208054909190811015610002579081526020812054601a5560068054600f929190859081101561000257600080516020611a3d8339815191520154600160a060020a031682525060209190915260409020600190810154601b5501610cd6565b60408051918252519081900360200190f35b6040518083600160a060020a031681526020018260ff1681526020019250505060405180910390f35b60408051600160a060020a03929092168252519081900360200190f35b60408051938452602084019290925282820152519081900360600190f35b565b33600160a060020a03166000908152600c602052604090205460341415610f91576001546040805160e760020a630142f9f902815260106004820181905233600160a060020a03818116602485015293519490931693633247bbeb939192859163a17cfc8091604481810192602092909190829003018160008760325a03f21561000257505050604051805190602001506001016040518460e060020a0281526004018084815260200183600160a060020a031681526020018260ff168152602001935050505060006040518083038160008760325a03f215610002575050505b6110b65b600060006011600050818154818355818115116118ef578282526118ef907f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68908101905b808211156110b257805474ffffffffffffffffffffffffffffffffffffffffff19168155600101610fd9565b5050509190906000526020600020906003020160006060604051908101604052808686815181101561000257906020019060200201518152602001600081526020016000815260200150909190915060008201518160000160005055602082015181600101600050556040820151816002016000505550505060010161063c565b506110b69291505b808211156110b25760008082556001820181815560029092015561108e565b600191505b5090565b5050565b33600160a060020a03166000908152600d6020526040902054600214156110b6576040805160015460e760020a630142f9f902825260106004830181905233600160a060020a03818116602486015294519290941693633247bbeb9391929091859163a17cfc8091604481810192602092909190829003018160008760325a03f21561000257505050604051805190602001506001016040518460e060020a0281526004018084815260200183600160a060020a031681526020018260ff168152602001935050505060006040518083038160008760325a03f21561000257506040805160015460e760020a630142f9f902825260106004830181905233600160a060020a03818116602486015294519290941695509291859163a17cfc8091604481810192602092909190829003018160008760325a03f21561000257505050604051805190602001506001016040518460e060020a0281526004018084815260200183600160a060020a031681526020018260ff168152602001935050505060006040518083038160008760325a03f215610002575050506110b6610f95565b505050919090600052602060002090600302016000606060405190810160405280868681518110156100025790602001906020020151815260200160008152602001600081526020015090919091506000820151816000016000505560208201518160010160005055604082015181600201600050555050506019600050600033600160a060020a0316815260200190815260200160002060005080548060010182818154818355818115116113355781836000526020600020918201910161133591905b808211156110b25760008155600101611321565b505050919090600052602060002090016000848481518110156100025750505060208381028501015190555060010161020e565b505050600092835250602080832060408051606081018252878152928301859052919091018390526003918202018481556001810183905560020191909155600e54106110b6575060005b60065460ff821610156115a45760068054600154600160a060020a031691633247bbeb91601091908590811015610002575080546000829052600080516020611a3d833981519152860154600160a060020a031691859163a17cfc8091859189908110156100025750506040805160e760020a630142f9f9028152600481019290925260248201859052516044828101926020929190829003018160008760325a03f21561000257505060408051805160e060020a633247bbeb0282526004820195909552602481019390935260019390930160ff16604483015250905160648281019260009291908290030181838760325a03f215610002575060015460068054600160a060020a039290921693506010918590811015610002575080546000829052600080516020611a3d833981519152860154600160a060020a031691859163a17cfc8091859189908110156100025750506040805160e760020a630142f9f9028152600481019290925260248201859052516044828101926020929190829003018160008760325a03f21561000257505060408051805160e060020a633247bbeb0282526004820195909552602481019390935260019390930160ff16604483015250905160648281019260009291908290030181838760325a03f215610002575050506001016113b4565b6115ac610f95565b6001600b555050565b6115bd610f95565b50565b6115bd6104dd565b60068054829081101561000257600082815260078054600080516020611a3d8339815191529390930154600160a060020a031673ffffffffffffffffffffffffffffffffffffffff199390931692909217909155815460029260179291859081101561000257600080516020611a3d8339815191520154600160a060020a031682525060209190915260409020555b60010161058b565b156110b6576110b6610c35565b600091505b60065460ff83161015611741575060005b60068054600d91600091859081101561000257600080516020611a3d8339815191520154600160a060020a0316825250602091909152604090205460ff821610156117a55760068054601491600091859081101561000257600080516020611a3d8339815191520154600160a060020a03168252506020919091526040902080546001810180835582818380158290116117b1576003028160030283600052602060002091820191016117b1919061108e565b60019190910190610c39565b600091505b600e5460ff831610156110b6576015805460018101808355828183801582901161183e57600083905261183e9060039081027f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4759081019184020161108e565b60019190910190611671565b50505091909060005260206000209060030201600060068054600d91600091889081101561000257600080516020611a3d8339815191520154600160a060020a031690915250602052604081208054859081101561000257906000526020600020906003020160005080548355600181810154908401556002908101549201919091555050600101611682565b505050919090600052602060002090600302016000600e805486908110156100025760009182526003027fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0190508054835560018181015490840155600290810154920191909155505060019190910190611746565b50506013805460008083559350909150829080158290116118e8578183600052602060002091820191016118e89190611321565b5050505050565b50505050600090505b60028160ff1610156115bd5760118054600181018083558281838015829011611934578183600052602060002091820191016119349190610fd9565b505050919090600052602060002090016000604080518082019091526010805482919087908110156100025760009182527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67201905054600160a060020a03168152601080546020929092019187908110156100025760009182527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720190505460a060020a9081900460ff16909152815184546020939093015190910274ff00000000000000000000000000000000000000001973ffffffffffffffffffffffffffffffffffffffff19909316909117919091161790915550506001016118f8565b60010161038656f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c681b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672', 
		 gas: gasVal
	   }, gameObj[cbFunc]);
	return (String(pokerhand));
}
/*
* Stores a community/public card to a specific "PokerHand" contract.
*/
function storePublicCard(contractAddress, card, gasVal) {
	trace ("cypherpokerlib.js -> storePublicCard (\""+contractAddress+"\", "+card+", "+gasVal+")");
	card=parseInt(card, 16);
	trace ("   card="+card);
	if ((contractAddress==null) || (contractAddress=="") || (contractAddress==undefined)) {
		return (null);
	}
	if ((gasVal==undefined) || (gasVal==null) || (gasVal=="")) {
		gasVal = 6000000;
	}	
	var pokerhand = pokerhandContract().at(contractAddress);
	var txhash=pokerhand.storePublicCard(card, {from: web3.eth.accounts[0], gas:gasVal});
	trace ("   TXhash="+txhash);
}
/*
* Stores private cards to a specific "PokerHand" contract.
*/
function storePrivateCards(contractAddress, cards, gasVal) {
	trace ("cypherpokerlib.js -> storePrivateCards (\""+contractAddress+"\", ["+cards+"], "+gasVal+")");
	for (var count=0; count<cards.length; count++) {
		cards[count]=parseInt(cards[count], 16);
		trace ("   parsed card value: "+cards[count]);
	}
	if ((contractAddress==null) || (contractAddress=="") || (contractAddress==undefined)) {
		return (null);
	}
	if ((gasVal==undefined) || (gasVal==null) || (gasVal=="")) {
		gasVal = 6000000;
	}	
	var pokerhand = pokerhandContract().at(contractAddress);
	var txhash=pokerhand.storePrivateCards(cards, {from: web3.eth.accounts[0], gas:gasVal});
	trace ("   TXhash="+txhash);
}
/*
* Stores a buy-in card to a specific "PokerHand" contract (for buy-in/tournament gaming).
*/
function storeBuyIn(contractAddress, etherValue) {
	trace ("cypherpokerlib.js -> storeBuyIn (\""+contractAddress+"\", "+ether+")");
	if ((contractAddress==null) || (contractAddress=="") || (contractAddress==undefined)) {
		return (null);
	}	
	var txhash=web3.eth.sendTransaction({from: web3.eth.accounts[0], to: contractAddress, value:web3.toWei(etherValue, 'ether')});
	trace ("   TXhash="+txhash);
}
/*
* Stores a a single bet to a specific "PokerHand" contract (for "cash" games).
*/
function storeBet(contractAddress, etherValue, gasVal) {
	trace ("cypherpokerlib.js -> storeBet (\""+contractAddress+"\", "+etherValue+", "+gasVal+")");
	if ((contractAddress==null) || (contractAddress=="") || (contractAddress==undefined)) {
		return (null);
	}
	if ((gasVal==undefined) || (gasVal==null) || (gasVal=="")) {
		gasVal = 3000000;
	}
	//var txhash=web3.eth.sendTransaction({from: web3.eth.accounts[0], to: contractAddress, value:web3.toWei(etherValue, 'ether')});
	var pokerhand = pokerhandContract().at(contractAddress);
	var txhash=pokerhand.storeBet({from: web3.eth.accounts[0], gas:gasVal, value:web3.toWei(etherValue, 'ether')});
	trace ("   TXhash="+txhash);
}
/*
* Folds the hand on a specific "PokerHand" contract.
*/
function fold(contractAddress, gasVal) {
	trace ("cypherpokerlib.js -> fold (\""+contractAddress+"\"");
	if ((contractAddress==null) || (contractAddress=="") || (contractAddress==undefined)) {
		return (null);
	}
	if ((gasVal==undefined) || (gasVal==null) || (gasVal=="")) {
		gasVal = 1000000;
	}
	var pokerhand = pokerhandContract().at(contractAddress);	
	var txhash=pokerhand.fold({from: web3.eth.accounts[0], gas:gasVal});
	trace ("   TXhash="+txhash);
}
/*
* Concedes a losing hand to the other player in a specific "PokerHand" contract.
*/
function concede(contractAddress, gasVal) {
	trace ("cypherpokerlib.js -> concede (\""+contractAddress+"\"");
	if ((contractAddress==null) || (contractAddress=="") || (contractAddress==undefined)) {
		return (null);
	}
	if ((gasVal==undefined) || (gasVal==null) || (gasVal=="")) {
		gasVal = 1000000;
	}
	var pokerhand = pokerhandContract().at(contractAddress);	
	var txhash=pokerhand.fold({from: web3.eth.accounts[0], gas:gasVal}); //currently just a fold
	trace ("   TXhash="+txhash);
}
/*
* Stores the crypto keypair for the playr in a specific "PokerHand" contract.
*/
function storeKeys(contractAddress, encKey, decKey, gasVal) {
	trace ("cypherpokerlib.js -> storeKeys (\""+contractAddress+"\", "+encKey+", "+decKey+", "+gasVal+")");	
	encKey=parseInt(encKey, 16);
	decKey=parseInt(decKey, 16);
	trace (" encKey="+encKey);
	trace (" decKey="+decKey);
	trace (" prime=59");
	if ((contractAddress==null) || (contractAddress=="") || (contractAddress==undefined)) {
		return (null);
	}
	if ((gasVal==undefined) || (gasVal==null) || (gasVal=="")) {
		gasVal = 60000000;
	}	
	var pokerhand = pokerhandContract().at(contractAddress);	
	var txhash=pokerhand.storeKeys(encKey, decKey, {from: web3.eth.accounts[0], gas:gasVal});
	trace ("   TXhash="+txhash);
	maxRetries[contractAddress]=0;
	setTimeout(generatePlayerScore, 15000, contractAddress, txhash);
}

var maxRetries=[];
/**
* Generates the player's best hand score when a hand is completed in a specific "PokerHand" contract.
*/
function generatePlayerScore(contractAddress, txhash, gasVal) {
	return;
	trace ("cypherpokerlib.js -> generatePlayerScore (\""+contractAddress+"\", \""+txhash+"\", "+gasVal+")");
	if ((contractAddress==null) || (contractAddress=="") || (contractAddress==undefined)) {
		return (null);
	}
	if (maxRetries[contractAddress]==10) {
		trace ("      Contract re-try limit (10) reached! Giving up.");
		return;
	}
	if ((gasVal==undefined) || (gasVal==null) || (gasVal=="")) {
		gasVal = 600000000;
	}
	var pokerhand = pokerhandContract().at(contractAddress);	
	if (handValuesDecrypted(pokerhand)) {
		trace ("      Contract completed. Now generating score.");
		try {
			trace ("   using gasVal="+gasVal);
			var txhash=pokerhand.generatePlayerScore({from: web3.eth.accounts[0], gas:gasVal});
		} catch (err) {
			trace (err);
		}
		trace ("   TXhash="+txhash);
	} else {
		trace ("      Contract incomplete. Re-trying in 15 seconds.");
		setTimeout(generatePlayerScore, 15000, contractAddress, gasVal);
	}
	maxRetries[contractAddress]++;
}

/**
* Returns true if the hand values (player's private and community cards) for a specific contract have been fully decrypted. This typically indicates
* the end of the associated hand.
*/
function handValuesDecrypted(pokerhand) {
	var cardIndexes=[];
	try {
		cardIndexes.push(playerCardIndex(pokerhand,0));	
		cardIndexes.push(playerCardIndex(pokerhand,1));
		cardIndexes.push(comunityCardIndex(pokerhand,0));
		cardIndexes.push(comunityCardIndex(pokerhand,1));
		cardIndexes.push(comunityCardIndex(pokerhand,2));
		cardIndexes.push(comunityCardIndex(pokerhand,3));
		cardIndexes.push(comunityCardIndex(pokerhand,4));
		cardIndexes.push(comunityCardIndex(pokerhand,5));
	} catch (err) {
		trace (err);
		cardIndexes.push(0);
	}
	for (var count=0; count<cardIndexes.length; count++) {
		var currentCardIndex=cardIndexes[count];
		if ((currentCardIndex==0) || (currentCardIndex=="0") || (currentCardIndex==null) || (currentCardIndex==undefined)) {
			return (false);
		}
	}
	return (true);
}

/**
* Returns the player's decrypted private/hole card at a specific index in a "PokerHand" contract.
*/
function playerCardIndex(contract, storageIndex) {
	return (contract.playerCards(web3.eth.accounts[0],storageIndex)[0]);
}
/**
* Returns the player's decrypted community card at a specific index in a "PokerHand" contract.
*/
function comunityCardIndex(contract, storageIndex) {
	return (contract.communityCards(storageIndex));
}

/**
* Creates support for extended modules: personal, admin, debug, miner, txpool, eth (some extra functions). The "web3" object
* must exist and be initialized prior to calling this function.
*
* Adapted from: https://github.com/The18thWarrior/web3_extended
*
* @param options An object containing boolean flags denoting the modules to enable. For example: options.admin=true;
*/
function createWeb3Extensions(options) {
	//personal
	if (options.personal) {
		web3._extend({
		  property: 'personal',
		  methods: [new web3._extend.Method({
		       name: 'unlockAccount',
		       call: 'personal_unlockAccount',
		       params: 3,
		       inputFormatter: [web3._extend.utils.toAddress, toStringVal, toIntVal],
		       outputFormatter: toBoolVal
		  })]
		});
		web3._extend({
		  property: 'personal',
		  methods: [new web3._extend.Method({
		       name: 'newAccount',
		       call: 'personal_newAccount',
		       params: 1,
		       inputFormatter: [toStringVal],
		       outputFormatter: toStringVal
		  })]
		});
		web3._extend({
		  property: 'personal',
		  methods: [new web3._extend.Method({
		       name: 'listAccounts',
		       call: 'personal_listAccounts',
		       params: 0,
		       outputFormatter: toNativeObject
		  })]
		});
		web3._extend({
		  property: 'personal',
		  methods: [new web3._extend.Method({
		       name: 'deleteAccount',
		       call: 'personal_deleteAccount',
		       params: 2,
		       inputFormatter: [web3._extend.utils.toAddress, toStringVal],
		       outputFormatter: toBoolVal
		  })]
		});
	}
	
	//admin
	if (options.admin) {
		/*
		//deprecated in 1.3.5
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: 'chainSyncStatus',
		       call: 'admin_chainSyncStatus',
		       params: 0,
		       outputFormatter: toJSONObject
		  })]
		});
		*/
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: 'verbosity',
		       call: 'admin_verbosity',
		       params: 1,
		       inputFormatter: [toIntValRestricted]
		  })]
		});
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: 'nodeInfo',
		       call: 'admin_nodeInfo',
		       params: 0,
		       outputFormatter: toNativeObject
		  })]
		});		
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: 'addPeer',
		       call: 'admin_addPeer',
		       params: 1,
		       inputFormatter: [toStringVal],
		       outputFormatter: toBoolVal
		  })]
		});		
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: 'peers',
		       call: 'admin_peers',
		       params: 0,
		       outputFormatter: toNativeObject
		  })]
		});		
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: 'startRPC',
		       call: 'admin_startRPC',
		       params: 4,
		       inputFormatter: [toStringVal, toIntVal, toStringVal, toStringVal],
		       outputFormatter: toBoolVal
		  })]
		});		
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: 'stopRPC',
		       call: 'admin_stopRPC',
		       params: 0,
		       outputFormatter: toBoolVal
		  })]
		});		
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: 'sleepBlocks',
		       call: 'admin_sleepBlocks',
		       params: 1,
		       inputFormatter: [toIntVal]
		  })]
		});		
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: 'datadir',
		       call: 'admin_datadir',
		       params: 0,
		       outputFormatter: toStringVal
		  })]
		});		
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: 'setSolc',
		       call: 'admin_setSolc',
		       params: 1,
		       inputFormatter: [toStringVal],
		       outputFormatter: toStringVal
		  })]
		});		
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: 'startNatSpec',
		       call: 'admin_startNatSpec',
		       params: 0
		  })]
		});		
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: 'stopNatSpec',
		       call: 'admin_stopNatSpec',
		       params: 0
		  })]
		});
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: '',
		       call: 'admin_',
		       params: 0,
		       inputFormatter: [web3._extend.utils.toAddress, toStringVal, toIntVal],
		       outputFormatter: toStringVal
		  })]
		});
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: 'getContractInfo',
		       call: 'admin_getContractInfo',
		       params: 1,
		       inputFormatter: [web3._extend.utils.toAddress],
		       outputFormatter: toNativeObject
		  })]
		});
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: 'saveInfo',
		       call: 'admin_saveInfo',
		       params: 0,
		       inputFormatter: [toJSONObject, toStringVal],
		       outputFormatter: toStringVal
		  })]
		});
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: 'register',
		       call: 'admin_register',
		       params: 3,
		       inputFormatter: [web3._extend.utils.toAddress, web3._extend.utils.toAddress, toStringVal],
		       outputFormatter: toBoolVal
		  })]
		});
		web3._extend({
		  property: 'admin',
		  methods: [new web3._extend.Method({
		       name: 'registerUrl',
		       call: 'admin_registerUrl',
		       params: 3,
		       inputFormatter: [web3._extend.utils.toAddress, toStringVal, toStringVal],
		       outputFormatter: toBoolVal
		  })]
		});
	}
	
	//debug
	if (options.debug) {
		web3._extend({
		  property: 'debug',
		  methods: [new web3._extend.Method({
		       name: 'setHead',
		       call: 'debug_setHead',
		       params: 1,
		       inputFormatter: [toIntVal],
		       outputFormatter: toBoolVal
		  })]
		});
		web3._extend({
		  property: 'debug',
		  methods: [new web3._extend.Method({
		       name: 'seedHash',
		       call: 'debug_seedHash',
		       params: 1,
		       inputFormatter: [toIntVal],
		       outputFormatter: toStringVal
		  })]
		});
		web3._extend({
		  property: 'debug',
		  methods: [new web3._extend.Method({
		       name: 'processBlock',
		       call: 'debug_processBlock',
		       params: 1,
		       inputFormatter: [toIntVal],
		       outputFormatter: toBoolVal
		  })]
		});
		web3._extend({
		  property: 'debug',
		  methods: [new web3._extend.Method({
		       name: 'getBlockRlp',
		       call: 'debug_getBlockRlp',
		       params: 1,
		       inputFormatter: [toIntVal],
		       outputFormatter: toStringVal
		  })]
		});
		web3._extend({
		  property: 'debug',
		  methods: [new web3._extend.Method({
		       name: 'printBlock',
		       call: 'debug_printBlock',
		       params: 1,
		       inputFormatter: [toIntVal],
		       outputFormatter: toStringVal
		  })]
		});
		web3._extend({
		  property: 'debug',
		  methods: [new web3._extend.Method({
		       name: 'dumpBlock',
		       call: 'debug_dumpBlock',
		       params: 1,
		       inputFormatter: [toIntVal],
		       outputFormatter: toStringVal
		  })]
		});
		web3._extend({
		  property: 'debug',
		  methods: [new web3._extend.Method({
		       name: 'metrics',
		       call: 'debug_metrics',
		       params: 1,
		       inputFormatter: [toBoolVal],
		       outputFormatter: toStringVal
		  })]
		});
	}
	
	//miner
	if (options.miner) {		
		web3._extend({
		  property: 'miner',
		  methods: [new web3._extend.Method({
		       name: 'start',
		       call: 'miner_start',
		       params: 1,
		       inputFormatter: [toIntVal],
		       outputFormatter: toBoolVal
		  })]
		});		
		web3._extend({
		  property: 'miner',
		  methods: [new web3._extend.Method({
		       name: 'stop',
		       call: 'miner_stop',
		       params: 1,
		       inputFormatter: [toIntVal],
		       outputFormatter: toBoolVal
		  })]
		});		
		web3._extend({
		  property: 'miner',
		  methods: [new web3._extend.Method({
		       name: 'startAutoDAG',
		       call: 'miner_startAutoDAG',
		       params: 0
		  })]
		});		
		web3._extend({
		  property: 'miner',
		  methods: [new web3._extend.Method({
		       name: 'makeDAG',
		       call: 'miner_makeDAG',
		       params: 2,
			   inputFormatter: [toIntVal, toStringVal],
		       outputFormatter: toBoolVal
		  })]
		});		
		web3._extend({
		  property: 'miner',
		  methods: [new web3._extend.Method({
		       name: 'hashrate',
		       call: 'miner_hashrate',
		       params: 0
		  })]
		});		
		web3._extend({
		  property: 'miner',
		  methods: [new web3._extend.Method({
		       name: 'setExtra',
		       call: 'miner_setExtra',
		       params: 1,
			   inputFormatter: [toStringVal]
		  })]
		});		
		web3._extend({
		  property: 'miner',
		  methods: [new web3._extend.Method({
		       name: 'setGasPrice',
		       call: 'miner_setGasPrice',
		       params: 1,
			   inputFormatter: [toIntVal]
		  })]
		});		
		web3._extend({
		  property: 'miner',
		  methods: [new web3._extend.Method({
		       name: 'setEtherbase',
		       call: 'miner_setEtherbase',
		       params: 1,
			   inputFormatter: [web3._extend.utils.toAddress]
		  })]
		});
	}
	
	//txpool
	if (options.txpool) {		
		web3._extend({
		  property: 'txpool',
		  methods: [new web3._extend.Method({
		       name: 'status',
		       call: 'txpool_status',
		       params: 0,
			   inputFormatter: [],
		       outputFormatter: toNativeObject
		  })]
		});
	}
	
	//eth
	if (options.eth) {		
		web3._extend({
		  property: 'eth',
		  methods: [new web3._extend.Method({
		       name: 'sign',
		       call: 'eth_sign',
		       params: 2,
			   inputFormatter: [web3._extend.utils.toAddress, toStringVal],
		       outputFormatter: toStringVal
		  })]
		});		
		web3._extend({
		  property: 'eth',
		  methods: [new web3._extend.Method({
		       name: 'pendingTransactions',
		       call: 'eth_pendingTransactions',
		       params: 0
		  })]
		});		
		web3._extend({
		  property: 'eth',
		  methods: [new web3._extend.Method({
		       name: 'resend',
		       call: 'eth_resend',
		       params: 3,
			   inputFormatter: [toJSONObject, toIntVal, toIntVal],
		       outputFormatter: toStringVal
		  })]
		});
	}

	//extension utility functions
	
	function toStringVal(val) {
		return String(val);
	}

	function toBoolVal(val) {
		console.log(val);
		if (String(val) == 'true') {
			return true;
		} else {
			return false;
		}
	}

	function toIntVal(val) {
		return parseInt(val);
	}

	function toIntValRestricted(val) {
		var check = parseInt(val);
		if (check > 0 && check <= 6) {
			return check;
		} else {
			return null;
		}
		
	}

	function toJSONObject(val) {
		try {
			return JSON.parse(val);
		} catch (e){
			return String(val);
		}
	}
	
	function toNativeObject(val) {
		return (val);
	}
}

trace ("cypherpokerlib.js -> CypherPoker (JavaScript) Library version "+version+" created.");